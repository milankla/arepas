name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports and basic functionality
      run: |
        python -c "from src.loader import ConfigurableDataLoader, NeighborhoodData, RobustCSVParser, ImageIndex; print('✅ Imports successful')"
    
    - name: Run ConfigurableDataLoader test (dry run)
      run: |
        # Test that ConfigurableDataLoader can be instantiated
        python -c "
        from src.loader import ConfigurableDataLoader
        import os
        
        if os.path.exists('config/data2.json'):
            try:
                loader = ConfigurableDataLoader('config/data2.json')
                print('✅ ConfigurableDataLoader instantiation successful')
            except Exception as e:
                print(f'⚠️  ConfigurableDataLoader test skipped: {e}')
        else:
            print('⚠️  config/data2.json not found, skipping test')
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort mypy
    
    - name: Check code formatting with Black
      run: |
        black --check --diff src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/
    
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || true  # Allow mypy to pass for now
